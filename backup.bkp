 

    def UrlMappingsHolder holder


        def res = new ByteArrayResource(topLevelMapping.bytes)

        def evaluator = new DefaultUrlMappingEvaluator(SCH.servletContext)
        def mappings = evaluator.evaluateMappings(res)

        holder = new DefaultUrlMappingsHolder(mappings)





   boolean after() {
        println("### AFTER ### "+params+" ####")

        HttpServletRequest request = getRequest()
        HttpServletResponse response = getResponse()

        // ignore requests to the message controller.
        // there are better ways to handle this in
        // a real app but I want to leave the interceptor
        // using the original uri match because changing
        // that has introduced other questions so I
        // want to eliminate that part of the confusion.
        if(params.controller == 'message') {
            false
        }

        addMessage 'afterInterceptor'
        if(params.id!=null) {

            println("#### PARAMS.ID : "+params.id)

            addMessage "model : ${model}"

            def newId = params.int('id') - 1
            println("#### NEWID : "+newId)

            request.setAttribute('id',newId)
            def attId = request.getAttribute('id')
            println("#### ATTRIBUTE ### : "+attId)
            /*
            int idValue = params.int('id')
            addMessage("id is $idValue")
            if (idValue > 0) {

                println("#### PARAMS.ID : "+params.id)
                println("#### IDVAL : "+idValue)

                addMessage "model : ${model}"

                def newId = idValue - 1
                println("#### NEWID : "+newId)

                addMessage 'redirect'
                request.getRequestDispatcher("/${params.controller}/${params.action}/${newId}").forward(request, response)
                //redirect(controller: params.controller, action: params.action, id: newId)
                false
            } else {
                render 'rendered by TestappInterceptor.after'
                false
            }
            */


            //final RequestDispatcher dispatcher;
            UrlMappingInfo info = holder.match("/${params.controller}/${params.action}/${attId}")
            String forwardUrl = UrlMappingUtils.buildDispatchUrlForMapping(info, true)
            RequestDispatcher dispatcher = request.getRequestDispatcher(forwardUrl)

            request.setAttribute('id',(params.id-1))
            request.setAttribute('format','json')

            dispatcher.forward(request,response)

            false
        }
        false
    }
